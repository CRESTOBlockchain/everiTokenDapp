{"ast":null,"code":"// we take the const variable from type and import it\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode'; // here we take that payload\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post('/api/users/register', userData).then(function (res) {\n      return history.push('/login');\n    }).catch(function (err) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login get user Token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/users/login', userData).then(function (res) {\n      // Save to Local Storage\n      var token = res.data.token; // set token to local storage\n\n      localStorage.setItem('jwtToken', token); // set token to auth header\n\n      setAuthToken(token); // Decode token to get user information\n\n      var decoded = jwt_decode(token); // set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set Logged in User\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // Log User Out - logout\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from local storage\n    localStorage.removeItem('jwtToken'); // Remove the authentication header for future requests\n\n    setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["/Users/caunicorn/Documents/everiTokenDapp/client/src/actions/authActions.js"],"names":["GET_ERRORS","SET_CURRENT_USER","axios","setAuthToken","jwt_decode","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA;AACA,SAAQA,UAAR,EAAoBC,gBAApB,QAA2C,SAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAACC,QAAD,EAAc;AAC7DN,IAAAA,KAAK,CAACO,IAAN,CAAW,qBAAX,EAAkCH,QAAlC,EACKI,IADL,CACU,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KADb,EAEKC,KAFL,CAEW,UAAAC,GAAG,EAAI;AACVN,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEf,UADD;AAELgB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,OAAD,CAAR;AAIH,KAPL;AAQH,GAT2B;AAAA,CAArB,C,CAWP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACb,QAAD;AAAA,SAAc,UAACE,QAAD,EAAc;AACjDN,IAAAA,KAAK,CAACO,IAAN,CAAW,kBAAX,EAA+BH,QAA/B,EACKI,IADL,CACU,UAAAC,GAAG,EAAI;AACrB;AADqB,UAEFS,KAFE,GAEOT,GAAG,CAACO,IAFX,CAEFE,KAFE,EAGT;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJS,CAKT;;AACAjB,MAAAA,YAAY,CAACiB,KAAD,CAAZ,CANS,CAOT;;AACA,UAAMG,OAAO,GAAGnB,UAAU,CAACgB,KAAD,CAA1B,CARS,CAST;;AACAZ,MAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,KAZL,EAaKV,KAbL,CAaW,UAAAC,GAAG,EAAI;AACVN,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEf,UADD;AAELgB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,OAAD,CAAR;AAIH,KAlBL;AAmBH,GApBwB;AAAA,CAAlB,C,CAsBP;;AACA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACD,OAAD,EAAa;AACvC,SAAO;AACHR,IAAAA,IAAI,EAAEd,gBADH;AAEHe,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALM,C,CASP;;AACA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAjB,QAAQ,EAAI;AACxC;AACAa,IAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAFwC,CAGxC;;AACAvB,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJwC,CAKxC;;AACAK,IAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,GAPyB;AAAA,CAAnB","sourcesContent":["// we take the const variable from type and import it\nimport {GET_ERRORS, SET_CURRENT_USER} from \"./types\";\nimport axios from 'axios'\nimport setAuthToken from '../utils/setAuthToken'\nimport jwt_decode from 'jwt-decode'\n\n// here we take that payload\nexport const registerUser = (userData, history) => (dispatch) => {\n    axios.post('/api/users/register', userData)\n        .then(res => history.push('/login'))\n        .catch(err => {\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        });\n};\n\n// Login get user Token\nexport const loginUser = (userData) => (dispatch) => {\n    axios.post('/api/users/login', userData)\n        .then(res => {\n// Save to Local Storage\n            const {token} = res.data;\n            // set token to local storage\n            localStorage.setItem('jwtToken', token);\n            // set token to auth header\n            setAuthToken(token);\n            // Decode token to get user information\n            const decoded = jwt_decode(token );\n            // set current user\n            dispatch(setCurrentUser(decoded))\n        })\n        .catch(err => {\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        });\n};\n\n// Set Logged in User\nexport const setCurrentUser = (decoded) => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n};\n\n\n\n// Log User Out - logout\nexport const logoutUser = () => dispatch => {\n    // Remove token from local storage\n    localStorage.removeItem('jwtToken');\n    // Remove the authentication header for future requests\n    setAuthToken(false);\n    // Set current user to {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}))\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}